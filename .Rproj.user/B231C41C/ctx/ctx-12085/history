rm(list = ls())
library(devtools)
load_all()
# load_all("./aftNested")
wrap_rweibull <- function(n, lambda, gamma){
# generate from a weibull using the parametrization in the draft
sc <- lambda^(-1/gamma); sh <- gamma
rweibull(n, scale = sc, shape = sh)
}
n <- 2000
p <- 5
qcens <- .97
aa <- c(4,-2,1,0,0)
X <- matrix(rbeta(n*(p), 0.5,2), ncol = p)
x1 <- 2*rbeta(n, 0.5,2)
pp <- rbinom(n,1,0.5)
# times <- X[,1:p]%*%aa + sin(5*x1) + pp*wrap_rweibull(n, 1,1) + (1-pp)*wrap_rweibull(n, 6,1)
times <- X[,1:p]%*%aa + sin(5*x1) + wrap_rweibull(n, 1,1)
par(mfrow = c(2,2))
plot(density(times-(X[,1:p]%*%aa + sin(x1))))
plot(times~X[,1])
plot(times~X[,p])
plot(times~x1)
dat <- data.frame(times = times,
x1 = x1,
x2 = X)
# add censoring ####
C <- quantile(dat$times, qcens)
dat$c <- as.numeric(dat$times<C)
dat$times[dat$c==0] <- C
hist(dat$times, breaks = 50)
hist(exp(dat$times), breaks = 50)
sample_val <- sample.int(n, n/4)
validation <- dat[sample_val,]
dat <- dat[-sample_val,]
debug(pen_mean_logS)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
mhat
debug(aft_nl)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
debug(lopt)
debug(llk)
plot(obj$f~obj$ax)
lambda
plot(-exp(obj$f)~obj$ax)
plot(-exp(obj$f-mean(obj$f))~obj$ax)
plot(exp(-exp(obj$f-mean(obj$f)))~obj$ax)
plot(exp(-exp(obj$f))~obj$ax)
plot(density(sm$xt$si$X[,1]))
plot(density(exp(sm$xt$si$X[,1])))
hist(exp(sm$xt$si$X[,1]), breaks = 50)
min(exp(sm$xt$si$X[,1]))
xx <- seq(-10,10, length.out = 100)
plot(xx~xx)
plot(-exp(xx)~xx)
xx <- seq(-5,5, length.out = 100)
plot(-exp(xx)~xx)
plot(exp(-exp(xx))~xx)
debug(pen_mean_logS)
hist(gs$s$s, breaks = 50)
hist(-exp(gs$s$s), breaks = 50)
kk
head(Xt0)
head(sm$xt$si$X)
exp(-5.5)
mhat
mean(log(gs$s$s))
range(gs$s$s))
range(gs$s$s)
mean(log(-gs$s$s))
kk
Xt0[,1] <- -kk
gs <- get.si(sm, coefs, Xt0, deriv = deriv)
n <- length(gs$f)
mhat <- sum(gs$s$s)/n
mhat
sum(exp(gs$s$s))/n
Xt0[,1] <- kk
gs <- get.si(sm, coefs, Xt0, deriv = deriv)
sum(exp(gs$s$s))/n
sum(gs$s$s)/n
mpen*pen_m$d0
t(param)%*%Spen%*%param)
t(param)%*%Spen%*%param
param
vpen*pen$d0
llk
debug(initialize.coef)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
plot(yy~sm$xt$si$X%*%alpha)
plot(exp(-yy)~sm$xt$si$X%*%alpha)
plot(exp(yy)~sm$xt$si$X%*%alpha)
plot(-exp(yy)~sm$xt$si$X%*%alpha)
plot(exp(-exp(yy))~sm$xt$si$X%*%alpha)
plot(exp(-exp(sm$X[ , -(1:na)]%*%exp(b1$par)))~sm$xt$si$X%*%alpha)
b1$par
b1$value
sum(res^2)/length(y) + pen
# compute the initial beta
ss <- function(bt, y, X, S){
if(sm$drop.coef){
bet <- exp(bt)
} else{ bet <- c(bt[1], exp(bt[-1]))}
res <- y-X%*%bet
pen <- t(bt)%*%S%*%bt
sum(res^2)/length(y) #+ pen
}
yy <- log(-log(1-rank(sm$xt$si$X%*%alpha)/(nrow(sm$X)+1)))
kk <- ncol(sm$X)-na
S <- sm$S[[1]][-(1:na), -(1:na)]
b1 <- optim(fn = ss, par = c(1, rnorm(kk-1)), y = yy,
X = sm$X[ , -(1:na)], S = lambda*S,
method = "L-BFGS-B", lower = -50, upper = 100)
plot(exp(-exp(sm$X[ , -(1:na)]%*%exp(b1$par)))~sm$xt$si$X%*%alpha)
plot(sm$X[ , -(1:na)]%*%exp(b1$par)~sm$xt$si$X%*%alpha)
b1$value
matplot(sm$X[ , -(1:na)])
matplot(sm$X[ , -(1:na)],x = sm$xt$si$X%*%alpha)
range/yy
range(yy)
debugonce(.build_nmi_bspline_basis)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
matplot(out$X, x = x)
matplot(sweep(out$X, MARGIN = 2, mean), x = x)
matplot(sweep(out$X, MARGIN = 2, "mean"), x = x)
matplot(sweep(out$X, MARGIN = 2,colMeans(out$X), "-"), x = x)
colSds(out$X)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
debug(initialize.coef)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
plot(sm$X[ , -(1:na)]%*%exp(b1$par)~sm$xt$si$X%*%alpha)
plot(exp(-exp(sm$X[ , -(1:na)]%*%exp(b1$par)))~sm$xt$si$X%*%alpha)
Q
debug(aft_nl)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
debug(lopt)
debug(llk)
out <- nlm(f = llk, p = env$coef, iterlim = 10000)
plot(obj$f~obj$ax)
plot(exp(-exp(obj$f))~obj$ax)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
undebug(initialize.coef)
debug(lopt)
debug(llk)
plot(exp(-exp(obj$f))~obj$ax)
sm$drop.coef
plot(exp(-exp(sm$X[ , -(1:na)]%*%exp(param)))~sm$xt$si$X%*%param[1:na])
plot(obj$f~obj$ax)
param
debug(initialize.coef)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
plot(exp(-exp(sm$X[ , -(1:na)]%*%exp(param)))~sm$xt$si$X%*%param[1:na])
plot(exp(-exp(sm$X[ , -(1:na)]%*%exp(b1$par)))~sm$xt$si$X%*%alpha)
lambda
lambda
init.par
debug(lopt)
env$coef
lambda
debug(llk)
debug(obj$eval)
plot(store$X0 %*% betat~ax)
plot(store$X0 %*% betat~ax1)
colMeans(store$X0)
load_all()
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
load_all()
debug(aft_nl)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
debug(lopt)
debug(llk)
debug(obj$eval)
matplot(store$X0, x = ax1)
plot(o$f~ax1)
plot(exp(-exp(o$f))~ax1)
llk
vpen*pen$d0
t(param)%*%Spen%*%param
mpen*pen_m$d0
debug(pen_mean_logS)
pen_m <- pen_mean_logS(sm = sm, coefs = param, deriv = deriv)
mhat
l0
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
load_all()
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
debug(log.htx)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
plot(d1~Xi%*%alpha)
plot(d0~Xi%*%alpha)
plot(exp(-exp(d0))~Xi%*%alpha)
matplot(X, x=Xi%*%alpha)
plot(exp(-exp(o$f))~o$ax)
beta
debug(initialize.coef)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
plot(exp(-exp(o$f))~o$ax)
debug(aft_nl)
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
lambda
plot(exp(-exp(sm$X[ , -(1:na)]%*%exp(b1$par)))~sm$xt$si$X%*%alpha)
lambda <- -lambda
b1 <- optim(fn = ss, par = c(1, rnorm(kk-1)), y = yy,
X = sm$X[ , -(1:na)], S = lambda*S,
method = "L-BFGS-B", lower = -50, upper = 100)
plot(exp(-exp(sm$X[ , -(1:na)]%*%exp(b1$par)))~sm$xt$si$X%*%alpha)
load_all()
fit2 <- aft_nl(times ~ s(x1, k=10) + x2.1 + x2.2 + x2.3+x2.4+x2.5,outer.args = list(k=20),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = FALSE)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
min(W)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
curve(pweibull, from = -10, to=10)
curve(wrap_rweibull, lambda=1, gamma=1, dist = TRUE, from = -10, to=10)
curve(function(x) wrap_rweibull(x, lambda=1, gamma=1, dist = TRUE),
from = -10, to=10)
wrap_rweibull <- function(n, lambda, gamma, dist = FALSE){
# generate from a weibull using the parametrization in the draft
sc <- lambda^(-1/gamma); sh <- gamma
if(dist) return(sapply(n, function(xx) pweibull(xx, scale = sc, shape = sh)))
rweibull(n, scale = sc, shape = sh)
}
curve(function(x) wrap_rweibull(x, lambda=1, gamma=1, dist = TRUE),
from = -10, to=10)
lambda <- 1; gamma<- 1
sc <- lambda^(-1/gamma); sh <- gamma
curve(pweibull, lambda=sc, gamma=sh,
from = -10, to=10)
curve(pweibull, scale=sc, shape=sh,
from = -10, to=10)
curve(function(x) pweibull(x, scale=sc, shape=sh),
from = -10, to=10)
curve(function(x) pweibull(x, scale=sc, shape=sh))
curve(function(x) qweibull(x, scale=sc, shape=sh))
curve(qweibull(1:10, scale=sc, shape=sh))
plot(qweibull(1:10, scale=sc, shape=sh))
qweibull(1:10, scale=sc, shape=sh)
plot(pweibull(1:10, scale=sc, shape=sh))
plot(pweibull(seq(0, max(W), length.out = 1000), scale=sc, shape=sh))
xx <- seq(0, max(W), length.out = 1000)
plot(pweibull(xx, scale=sc, shape=sh))
plot(pweibull(xx, scale=sc, shape=sh)~xx)
xx <- seq(0, max(W), length.out = 1000)
plot(pweibull(xx, scale=sc, shape=sh)~xx)
points(rank(W)/length(W)~ W, col="grey")
points(1-exp(f2$s$s)~f2$xba, col="blue")
points(1-exp(f2$s$s)~f2$xba, col="red")
plot(wrap_rweibull(xx, 1, 1, TRUE)~xx)
plot(f2$f~f2$xba, col="grey")
plot(as.matrix(fit2$smooth$xt$si$X[, 2:(p+1)])%*%f2$alpha[1:p+1]~lintrue,main = "ce")
plot(fit2$smooth$xt$si$X[,-(1:(p+1))]%*%(f2$alpha[-(1:(p+1))])~dat$x1, ylim= c(-1,1.5),
main = "smooth part", col="red")
points(smtrue~dat$x1)
points(smtrue~dat$x1, ylim= c(-1,1.5),main = "smooth part")
plot(aa, pch=20)
plot(aa, pch=20, cex = 1.5)
points(f2$alpha[1:p+1], col="red", cex = 1.5, pch = 20)
points(-f2$alpha[1:p+1], col="red", cex = 1.5, pch = 20)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
if(dist) return(pweibull(n, scale = sc, shape = sh))
wrap_rweibull <- function(n, lambda, gamma, dist = FALSE){
# generate from a weibull using the parametrization in the draft
sc <- lambda^(-1/gamma); sh <- gamma
if(dist) return(pweibull(n, scale = sc, shape = sh))
rweibull(n, scale = sc, shape = sh)
}
plot(wrap_rweibull(xx, 1, 1, TRUE)~xx)
points(rank(W)/length(W)~ W, col="grey") # ecdf
points(1-exp(f2$s$s)~f2$xba, col="red") # estimated survival
par(mfrow = c(2,2))
plot(aa, pch=20, cex = 1.5, main = "linear coef")
points(-f2$alpha[1:p+1], col="red", cex = 1.5, pch = 20)
plot(as.matrix(fit2$smooth$xt$si$X[, 2:(p+1)])%*%f2$alpha[1:p+1]~lintrue,
main = "linear part")
plot(smtrue~dat$x1, ylim= c(-1,1.5),main = "smooth part")
points(fit2$smooth$xt$si$X[,-(1:(p+1))]%*%(f2$alpha[-(1:(p+1))])~dat$x1, col="red")
W <- drop(dat$times +lintrue + smtrue) ##observed noise
xx <- seq(0, max(W), length.out = 1000)
plot(wrap_rweibull(xx, 1, 1, TRUE)~xx)
points(rank(W)/length(W)~ W, col="grey") # ecdf
points(1-exp(f2$s$s)~f2$xba, col="red") # estimated survival
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
xx <- seq(0, max(W), length.out = 1000)
pp <- rbinom(1000,1,0.5)
plot(pp*wrap_rweibull(xx, 1,1, TRUE) + (1-pp)*wrap_rweibull(xx, 6,1, TRUE)~xx)
source("~/Dropbox/dottorato pd/Accelerated_failure_time/code/sims_aft.R", echo=TRUE)
rm(list = ls())
library(devtools)
load_all()
# load_all("./aftNested")
wrap_rweibull <- function(n, lambda, gamma, dist = FALSE){
# generate from a weibull using the parametrization in the draft
sc <- lambda^(-1/gamma); sh <- gamma
if(dist) return(pweibull(n, scale = sc, shape = sh))
rweibull(n, scale = sc, shape = sh)
}
n <- 2000
p <- 5
qcens <- .97
aa <- c(4,-2,1,0,0)
X <- matrix(rbeta(n*(p), 0.5,2), ncol = p)
x1 <- 2*rbeta(n, 0.5,2)
pp <- rbinom(n,1,0.5)
times <- X[,1:p]%*%aa + sin(5*x1)+ pp + pp*wrap_rweibull(n, 1,1) + (1-pp)*wrap_rweibull(n, 6,1)
# times <- X[,1:p]%*%aa + sin(5*x1) + wrap_rweibull(n, 1,1)
par(mfrow = c(2,2))
plot(density(times-(X[,1:p]%*%aa + sin(x1))))
plot(times~X[,1])
plot(times~X[,p])
plot(times~x1)
dat <- data.frame(times = times,
x1 = x1,
x2 = X,
x3 = pp)
# add censoring ####
C <- quantile(dat$times, qcens)
dat$c <- as.numeric(dat$times<C)
dat$times[dat$c==0] <- C
hist(dat$times, breaks = 50)
hist(exp(dat$times), breaks = 50)
sample_val <- sample.int(n, n/4)
validation <- dat[sample_val,]
dat <- dat[-sample_val,]
fit2 <- aft_nl(times ~ s(x1, k=40) + x2.1 + x2.2 + x2.3+x2.4+x2.5 + x3,
outer.args = list(k=10),
data = dat, val = validation, #unif=FALSE,
censored = "c", trace = TRUE, ps = TRUE)
f2 <- get.si(fit2$smooth, fit2$coefficients)
f2$alpha[1:p+1]
aa
lintrue <- -as.matrix(dat[,3:7])%*%aa
smtrue <- -sin(5*dat$x1)+mean(sin(5*dat$x1))
par(mfrow = c(2,2))
plot(aa, pch=20, cex = 1.5, main = "linear coef")
points(-f2$alpha[1:p+1], col="red", cex = 1.5, pch = 20)
plot(as.matrix(fit2$smooth$xt$si$X[, 2:(p+1)])%*%f2$alpha[1:p+1]~lintrue,
main = "linear part")
plot(smtrue~dat$x1, ylim= c(-1,1.5),main = "smooth part")
points(fit2$smooth$xt$si$X[,-(1:(p+1))]%*%(f2$alpha[-(1:(p+1))])~dat$x1, col="red")
W <- drop(dat$times +lintrue + smtrue) ##observed noise
xx <- seq(0, max(W), length.out = 1000)
pp <- rbinom(1000,1,0.5)
plot(pp*wrap_rweibull(xx, 1,1, TRUE) + (1-pp)*wrap_rweibull(xx, 6,1, TRUE)~xx)
points(rank(W)/length(W)~ W, col="grey") # ecdf
points(1-exp(f2$s$s)~f2$xba, col="red") # estimated survival
load_all()
