##################
#'
#' Log-likelhood of a AFC model
#'
#' @description XXX.
#' @param param XXX.
#' @param deriv XXX.
#' @rdname llk_afc
#' @examples
#' library(gamFactory)
#' n <- 10
#' y <- rnorm(n)
#' param <- c(0.5, 1.5) # mu and 1/sigma
#'
#' # Derivatives of Gaussian log-lik up to order 3
#' llk_afc(y = y, param = param, deriv = 3)
#'
#' # Wrap derivatives for compatibility with gamFactory::checkDeriv
#' obj <- list(
#'   "d0" = function(param){
#'     sum(llk_afc(y = y, param = param, deriv = 0)$d0)
#'   },
#'   "d1" = function(param){
#'     colSums(do.call("cbind", llk_afc(y = y, param = param, deriv = 1)$d1))
#'
#'   },
#'   "d2" = function(param){
#'     colSums(do.call("cbind", llk_afc(y = y, param = param, deriv = 2)$d2))
#'
#'   },
#'   "d3" = function(param){
#'     colSums(do.call("cbind", llk_afc(y = y, param = param, deriv = 3)$d3))
#'   })
#'
#' check_deriv(obj = obj, param = param, ord = 1:3)
#' @export

llk_afc <- function(obj, sm, delta, lambda, vpen, mpen) {

  force(obj); force(sm); force(delta); force(vpen);force(trace); force(lambda)
  .out_fun <- function(param, deriv = 2, kde=NULL){

    if (is.list(param) ) param <- do.call("cbind", param)
    if (is.vector(param)) param <- matrix(param, ncol = 1)

    obj <- obj$eval(param = param, deriv = deriv+1, kde)

    ltx <- log.htx(obj, deriv = deriv, delta = delta)
    stx <- log.Stx(obj, deriv = deriv)

    llk <- sum(ltx$h) + sum(stx$s)
    loss_d1 <- loss_d2 <- NULL
    na <- obj$na
    Spen <- Reduce("+", lapply(1:length(sm$S), function(ii) lambda[ii]*sm$S[[ii]])) # Outer and inner ridge penalties
    pen <- pen_var_si(o = obj, v = 1, deriv = deriv)
    pen_m <- pen_mean_logS(sm = sm, coefs = param, deriv = deriv)
    loss <- drop(- llk + vpen*pen$d0 + mpen*pen_m$d0 + t(param)%*%Spen%*%param)
    # print(paste0("llk ", llk,
    #              "   ps  ", t(param)%*%Spen%*%param,
    #              "   lambda  ", lambda))
    if(deriv > 0){
      d1 <- c(ltx$dhda + stx$dhda,
              ltx$dhdb + stx$dhdb)
      loss_d1 <- - d1 + 2 * Spen %*% param + mpen*pen_m$d1
      loss_d1[1:na] <- loss_d1[1:na] + vpen*pen$d1

      if(deriv > 1){
        d2 <- ltx$dhab + stx$dhab
        loss_d2 <- - d2 + 2 * Spen + mpen*pen_m$d2
        loss_d2[1:na, 1:na] <- loss_d2[1:na, 1:na] + vpen*pen$d2
      }
    }

    return(structure(loss,
                     gradient = loss_d1,
                     hessian = loss_d2
    ))
  }
  return(.out_fun)

}
