rm(list = ls())
library(devtools)
load_all()
# load_all("./aftNested")

wrap_rweibull <- function(n, lambda, gamma){
  # generate from a weibull using the parametrization in the draft
  sc <- lambda^(-1/gamma); sh <- gamma
  rweibull(n, scale = sc, shape = sh)
}

n <- 1000
p <- 2
aa <- c(-3,0)

X <- matrix(rbeta(n*(p), 0.5,2), ncol = p)
x1 <- rbeta(n, 0.5,2)
pp <- rbinom(n,1,0.5)
times <- X[,1:p]%*%aa + sin(5*x1) + pp*wrap_rweibull(n, 1,1) + (1-pp)*wrap_rweibull(n, 6,1)

par(mfrow = c(2,2))
plot(density(times-(X[,1:p]%*%aa + sin(x1))))
plot(times~X[,1])
plot(times~X[,p])
plot(times~x1)

dat <- data.frame(times = times,
                  x1 = x1)
dat$st <- cbind(times, X)

### smooth
tmp <- gam(times~0+s(x, k=5), data = data.frame(times=times, x=x1), fit = FALSE)
dat$st <- cbind(dat$st, data.frame(sin = tmp$X))
S.list <- list(sin = matrix(0, nrow = ncol(dat$st), ncol = ncol(dat$st)))
S.list[[1]][-(1:(p+1)), -(1:(p+1))] <- tmp$S[[1]]

# add censoring ####
C <- quantile(dat$times, .97)
dat$c <- as.numeric(dat$times<C)
dat$st[dat$c==0,1] <- log(C)
dat$times[dat$c==0] <- C
hist(dat$times, breaks = 50)
hist(exp(dat$times), breaks = 50)

sample_val <- sample.int(n, n/4)
val <- dat[sample_val,]
dat <- dat[-sample_val,]

formula <- ~s_ncon(st, m=c(4,2), k = 10, trans = trans_linear())
data = dat

unif=FALSE
censored = "c"
form_comp <- .compile_formula(formula)

sm <- aftNested:::smooth.construct.misi.smooth.spec(object = form_comp,
                                                    data = data, knots = list(),
                                                    unif)
eff <- eff_misi(sm$xt$si$X, basis = sm$xt$basis)
lambda <- initial.lambda(sm)
init.par <- initialize.coef(sm, lambda[1])
out_env <- new.env()
lopt <- lambda.optim(eff, sm, delta = data[[censored]], vpen = 1e4, mpen = 10,
                     out_env,val = val, delta.val = val[[censored]],
                     init.par = init.par,trace=TRUE)
# debug(lopt)
out_l <- optim(par = lambda, fn = lopt, lower = 0.05, method = "L-BFGS-B")
#
#
load_all()
pp <- pen_mean_logS(sm, init.par, deriv = 2)
nd <- jacobian(function(a) pen_mean_logS(sm, a, deriv = 2)$d0, x = init.par)
pp$d1-nd
#
nd <- hessian(function(p) pen_mean_logS(sm, p, deriv = 0)$d0, x = init.par)
range(pp$d2-nd)

