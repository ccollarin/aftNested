#'
#' Fit AFT models with non-linear cumulative survival function
#'
#' @param formula,family,data same arguments as in [mgcv::gam].
#' @param ... further arguments to be passed to [mgcv::gam].
#' @name aft_nl
#' @rdname aft_nl
#' @export
#'
aft_nl <- function(formula, data = list(),val = list(),
                   censored=NULL, min.lambda = 0.05, trace=FALSE, ...){

  form_comp <- .compile_formula(formula)

  sm <- aftNested2:::smooth.construct.misi.smooth.spec(object = form_comp,
                                                data = data, knots = list(),...)
  eff <- eff_misi(sm$xt$si$X, basis = sm$xt$basis)

  lambda <- 1#log(initial.lambda(eff, sm, delta = data[[censored]], vpen = 1e4))
  init.par <- initialize.coef(sm, lambda)
  out_env <- new.env()
  lopt <- lambda.optim(eff, sm, delta = data[[censored]], vpen = 1e4,
                       out_env,val = val, delta.val = val[[censored]],
                       init.par = init.par, trace=trace)
  out_l <- tryCatch(optim(par = lambda, fn = lopt, lower = min.lambda, method = "L-BFGS-B"),
                    warning = function(war) {return(as.character(war))},
                    error = function(err) {return(as.character(err))})

  if(length(out_l)==1){return(out_env$coef)}

  out <- out_env$out
  out$lambda <- out_l$par
  out$gcv <- out_l$value
  out$convergence <- out_l$convergence
  out$iterations <- out_l$counts

  # DbDr <- .Dbdrho(out, llk = llk(out$coefficients), lambda = lambda)
  # eff <- eff$eval(out$coefficients, deriv = 4)

  class(out) <- c("aftnl", class(out))

  return( out )

}


