#'
#' Monotone increasing single index effects for mgcv
#'
#' @name smooth.construct.misi.smooth.spec
#' @rdname smooth.construct.misi.smooth.spec
#' @importFrom MASS Null
#' @importFrom Matrix rankMatrix
#' @export smooth.construct.misi.smooth.spec
#'
smooth.construct.misi.smooth.spec <- function(object, data, knots, unif=FALSE){

  # Most information on single index matrix and penalty is inside "si" list.
  si <- object$xt$si
  if( is.null(si) ){ si <- object$xt$si <- list() }

  # Inner model matrix (to be projected via single index)
  Xi <- data[[object$term]]

  # Need to center Xi and save colMeans because we need to subtract it when predicting using new data
  Xi <- scale(Xi, scale = FALSE)
  si$xm <- attr(Xi, "scaled:center")

  di <- ncol( Xi )

  # Dealing with inner penalty
  Si <- si$S
  no_pen <- is.null(Si) && is.null(si$pord)
  if( no_pen ){ # Case [a] no penalisation
    si$X <- Xi
    si$B <- diag(nrow = ncol(Xi))
    si$rank <- 0
  } else {
    if( is.null(Si) ){ # Case [b] "P-splines" penalty
      error("pord not implemented yet")
      if( is.null(si$pord) ){ si$pord <- 0 }
      Si <- .psp(d = di, ord = si$pord)
      rankSi <- ncol(Xi) - si$pord
    } else { # Case [c] custom penalty Si
      rankSi <- sapply(Si, rankMatrix)
    }
    # Reparametrise Xi so that the penalty on the single index vector is diagonal
    si <- append(si, aftNested:::.diagPen(X = Xi, S = Si, r = rankSi, fl = si$fplp))
  }

  # alpha is vector of inner coefficients, si$alpha is a vector of initial values for it.
  # alpha0 is an offset such that the full_alpha = alpha + alpha0
  if( is.null(si$a0) ){
    if( no_pen ){
      si$a0 <- rep(0, di)
    } else {
      si$a0 <- rep(0, di)
    }
  }
  if( is.null(si$alpha) ){
    if(length(si$S)>0) {
      SS <- Reduce("+", lapply(1:length(si$S), function(ii) si$l0[[ii]]*si$S[[ii]]))[-1,-1]
    } else {SS<-0}
    # si$alpha <- c(1, rnorm(di-1))
    si$alpha <-c(1, solve(t(Xi[,-1])%*%Xi[,-1] + SS)%*%t(Xi[,-1])%*%Xi[,1])
  }
  # Reparametrise and then impose that variance should be 1
  si$alpha <- solve(si$B, si$alpha)
  si$a0 <- solve(si$B, si$a0)
  tmp <- sd(si$X %*% (si$alpha + si$a0))
  si$alpha <- si$alpha / tmp
  si$a0  <- si$a0 / tmp

  # Compute single index vector and store it in the data
  ax <- drop( si$X %*% (si$alpha + si$a0) )
  if(unif){
    object$kde <- .ckde(ax, h = (4/(3*nrow(Xi)))^(1/5), Xi_fix = Xi) # sd=1
    data[[object$term]] <- object$kde(ax)$d0
  } else{
    object$kde <- NULL
    data[[object$term]] <- ax
  }
  si$alpha[1] <- log(si$alpha[1]); si$alpha[-1] <- - si$alpha[-1]

  # Construct the B-splines corresponding to the outer smooth effect
  out <- .build_nmi_bspline_basis(object = object, data = data, knots = knots, si = si)

  # Add inner penalty matrix (diagonalised and padded with zeros corresponding to the outer coefficients)
  dsmo <- out$bs.dim - di
  if( !no_pen ){
    si <- out$xt$si
    out$S <- c(out$S,
               lapply(si$S, function(ss) {
                 rbind(cbind(ss, matrix(0, di, dsmo)),
                        cbind(matrix(0, dsmo, di), matrix(0, dsmo, dsmo)))}))
    out$null.space.dim <- out$null.space.dim + (out$bs.dim - Reduce("+", si$rank))
    out$rank <- c(out$rank, Reduce("+", si$rank))
  }

  out$kde <- object$kde
  out$xt$basis$unif <- unif
  out$first.para <- length(si$alpha)+1
  out$last.para <- out$first.para + dsmo - 1

  class(out) <- c("si", "nested")
  return( out )
}
