// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gauss_kce
List gauss_kce(NumericVector x, arma::mat Xi, int deriv, NumericVector x_fix, arma::mat Xi_fix, double h);
RcppExport SEXP _aftNested_gauss_kce(SEXP xSEXP, SEXP XiSEXP, SEXP derivSEXP, SEXP x_fixSEXP, SEXP Xi_fixSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xi(XiSEXP);
    Rcpp::traits::input_parameter< int >::type deriv(derivSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_fix(x_fixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xi_fix(Xi_fixSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_kce(x, Xi, deriv, x_fix, Xi_fix, h));
    return rcpp_result_gen;
END_RCPP
}
// triweight_kce
List triweight_kce(NumericVector x, arma::mat Xi, int deriv, NumericVector x_fix, arma::mat Xi_fix, double h);
RcppExport SEXP _aftNested_triweight_kce(SEXP xSEXP, SEXP XiSEXP, SEXP derivSEXP, SEXP x_fixSEXP, SEXP Xi_fixSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xi(XiSEXP);
    Rcpp::traits::input_parameter< int >::type deriv(derivSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_fix(x_fixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xi_fix(Xi_fixSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(triweight_kce(x, Xi, deriv, x_fix, Xi_fix, h));
    return rcpp_result_gen;
END_RCPP
}
// order_
List order_(NumericVector x);
RcppExport SEXP _aftNested_order_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aftNested_gauss_kce", (DL_FUNC) &_aftNested_gauss_kce, 6},
    {"_aftNested_triweight_kce", (DL_FUNC) &_aftNested_triweight_kce, 6},
    {"_aftNested_order_", (DL_FUNC) &_aftNested_order_, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_aftNested(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
